---
description: 
globs: 
alwaysApply: true
---
# 编码规范与最佳实践

## TypeScript

- 尽可能使用TypeScript的静态类型系统
- 避免使用`any`类型，除非绝对必要
- 使用接口（`interface`）定义复杂数据结构
- 使用类型别名（`type`）定义可复用的类型

## React最佳实践

- 使用函数式组件和React Hooks
- 遵循单一责任原则，每个组件只做一件事
- 使用React.memo()优化组件重渲染
- 使用useCallback和useMemo缓存函数和计算值
- 避免组件树过深，保持组件结构扁平

## 状态管理

- 本地组件状态使用useState或useReducer
- 全局状态使用Zustand
- 避免过度使用全局状态，优先考虑本地状态或上下文（Context）
- 将相关状态和操作封装在同一个store中

## 异步操作

- 使用React Query进行API请求管理
- 处理加载状态和错误状态
- 使用try/catch捕获异步操作的错误

## 样式管理

- 使用TailwindCSS进行样式管理
- 复杂组件可以使用SCSS模块
- 遵循一致的命名约定
- 响应式设计优先

## 代码结构与组织

- 相关文件应当放在一起
- 文件名使用Pascal Case（如：`UserProfile.tsx`）
- 组件名与文件名一致
- 导出默认一个主要组件/函数/类
- 辅助函数和类型可以作为命名导出

## 注释原则

- 复杂逻辑需要注释说明
- 使用JSDoc风格注释函数和组件
- 避免多余的注释
- 使用TODO标记未完成的工作

